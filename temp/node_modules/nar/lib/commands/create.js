// Generated by LiveScript 1.2.0
var path, nar, program, ref$, echo, exit, exists, isDir, isFile, isString, toKb, options, create, normalize, apply;
path = require('path');
nar = require('../nar');
program = require('commander');
ref$ = require('../utils'), echo = ref$.echo, exit = ref$.exit, exists = ref$.exists, isDir = ref$.isDir, isFile = ref$.isFile, isString = ref$.isString, toKb = ref$.toKb;
options = ['dependencies', 'devDependencies', 'peerDependencies', 'globalDependencies', 'patterns', 'binary', 'binaryPath'];
program.command('create [path]').description('\n  Create a nar archive').usage('[path] [options]').option('-o, --output <path>', 'Output directory. Default to current directory').option('-f, --file <name>', 'Define the archive file name').option('-r, --dependencies', 'Include dependencies').option('-x, --dev-dependencies', 'Include development dependencies').option('-p, --peer-dependencies', 'Include peer dependencies').option('-g, --global-dependencies <names>', 'Include global dependencies, comma separated').option('-n, --omit-dependencies', 'Create archive without embed any type of dependencies').option('-i, --patterns <patterns>', 'Glob patterns to use for files include/exclude, comma separated').option('-b, --binary', 'Include node binary').option('-l, --binary-path <path>', 'Custom node binary to embed into the archive').option('-d, --debug', 'Enable debug mode. More information will be shown').option('-v, --verbose', 'Enable verbose mode. A lot of information will be shown').on('--help', function(){
  return echo('  Usage examples:\n\n    $ nar create\n    $ nar create some/dir --debug\n    $ nar create path/to/package.json -o some/dir\n    $ nar create --verbose\n    $ nar create --global-dependencies \'npm,grunt\' --patterns \'!.tmp,src/**\'\n\t');
}).action(function(){
  return create.apply(this, arguments);
});
create = function(pkgpath, options){
  var debug, verbose, output, file, opts, onError, onStart, onArchive, onEntry, onEnd, create, e;
  debug = options.debug, verbose = options.verbose, output = options.output, file = options.file;
  opts = {
    dest: output,
    file: file
  };
  apply(options, opts);
  if (opts.binaryPath) {
    opts.binary = true;
  }
  if (options.omitDependencies) {
    opts.dependencies = false;
    opts.devDependencies = false;
    opts.peerDependencies = false;
  }
  if (pkgpath) {
    if (!exists(
    pkgpath)) {
      exit(1)(
      "Error: path do not exists");
    }
    if (isFile(
    pkgpath)) {
      pkgpath = path.dirname(
      pkgpath);
    }
    if (!isDir(
    pkgpath)) {
      exit(1)(
      "Error: path must be a directory");
    }
    opts.path = pkgpath;
  }
  onError = function(err, code){
    if (err) {
      echo(
      ("Error: " + (err.message || err)).red);
    }
    if (debug && err.stack) {
      echo(
      err.stack);
    }
    return exit(
    code || 1)();
  };
  onStart = function(){
    return echo(
    "Creating archive...");
  };
  onArchive = function(it){
    if (!(debug && verbose)) {
      return echo(
      "Adding [" + it.type.cyan + "] " + (it.name || ''));
    }
  };
  onEntry = function(it){
    return echo(
    "Add [".green + (toKb(
    it.size) + " KB").cyan + ("] " + (it.name || '')).green);
  };
  onEnd = function(output){
    echo(
    "Created in: " + output);
    return exit(0);
  };
  create = function(){
    var archive;
    archive = nar.create(opts).on('start', onStart).on('archive', onArchive).on('error', onError).on('end', onEnd);
    if (debug || verbose) {
      return archive.on('entry', onEntry);
    }
  };
  try {
    return create();
  } catch (e$) {
    e = e$;
    return onError(
    e);
  }
};
normalize = function(type, value){
  if (type === 'globalDependencies' || type === 'patterns') {
    return value.split(',').map(function(it){
      return it.trim();
    });
  } else {
    return value;
  }
};
apply = function(args, opts){
  return options.filter(function(it){
    return args[it] === true || isString(
    args[it]);
  }).forEach(function(it){
    return opts[it] = normalize(it, args[it]), opts;
  });
};
