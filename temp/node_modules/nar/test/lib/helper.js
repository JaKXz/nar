// Generated by LiveScript 1.2.0
var fs, path, http, chai, rimraf, mkdirp, stubby, request, nodeStatic, nar, spawn, version, node, narBin, cwd;
fs = require('fs');
path = require('path');
http = require('http');
chai = require('chai');
rimraf = require('rimraf');
mkdirp = require('mkdirp');
stubby = require('stubby');
request = require('request');
nodeStatic = require('node-static');
nar = require('../../lib/nar');
spawn = require('child_process').spawn;
version = require('../../package.json').version;
node = process.execPath;
narBin = path.join(__dirname, '/../../', 'bin/nar');
cwd = process.cwd();
module.exports = {
  fs: fs,
  nar: nar,
  cwd: cwd,
  node: node,
  version: version,
  request: request,
  expect: chai.expect,
  rm: rimraf.sync,
  mk: mkdirp.sync,
  chdir: process.chdir,
  env: process.env,
  join: path.join,
  createWriteStream: fs.createWriteStream,
  read: function(it){
    var data;
    data = fs.readFileSync(
    it).toString();
    if (/.json$/.test(
    it)) {
      return JSON.parse(
      data);
    } else {
      return data;
    }
  },
  exists: function(it){
    return fs.existsSync(it);
  },
  spy: function(fn){
    var call;
    call = function(){
      if (!call.called) {
        fn.apply(this, arguments);
        return call.called = true;
      }
    };
    call.called = false;
    return call;
  },
  once: function(fn){
    var call;
    call = false;
    return function(){
      if (!call) {
        call = true;
        return fn.apply(this, arguments);
      }
    };
  },
  uncaught: function(){
    process.removeListener('uncaughtException', process.listeners('uncaughtException')[0]);
    return process.addListener('uncaughtException', function(){});
  },
  exec: function(type, args, callback){
    var command, data;
    command = spawn(node, [narBin].concat(args), {
      env: process.env
    });
    if (type === 'close') {
      return command.on(type, callback);
    } else {
      data = '';
      command.stdout.on(type, function(it){
        return data += it.toString();
      });
      return command.on('close', function(code){
        return callback(data, code);
      });
    }
  },
  suppose: function(args){
    return suppose(node, [narBin].concat(args));
  },
  server: function(done){
    var server;
    server = new stubby.Stubby;
    server.start({
      data: require("../fixtures/mock.json")
    }, done);
    return server;
  },
  staticServer: function(dir){
    var file;
    file = new nodeStatic.Server(dir);
    return http.createServer(function(request, response){
      return request.addListener('end', function(){
        return file.serve(request, response);
      }).resume();
    }).listen(8883);
  }
};
