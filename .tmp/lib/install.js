// Generated by LiveScript 1.2.0
var join, download, extract, EventEmitter, ref$, next, isWin, isArray, replaceEnvVars, isFile, isUrl, clone, extend, defaults, install, apply, slice$ = [].slice;
join = require('path').join;
download = require('./download');
extract = require('./extract');
EventEmitter = require('events').EventEmitter;
ref$ = require('./utils'), next = ref$.next, isWin = ref$.isWin, isArray = ref$.isArray, replaceEnvVars = ref$.replaceEnvVars, isFile = ref$.isFile, isUrl = ref$.isUrl, clone = ref$.clone, extend = ref$.extend;
defaults = {
  gzip: true,
  dest: 'node_modules',
  clean: true
};
module.exports = install = function(options){
  var ref$, path, dest, clean, emitter, cleanDir, onError, onEntry, onArchive, onProgress, onEnd, extractor, downloader, doInstall;
  ref$ = options = apply(
  options), path = ref$.path, dest = ref$.dest, clean = ref$.clean;
  emitter = new EventEmitter;
  cleanDir = function(){
    try {
      if (clean) {
        return rm(dest);
      }
    } catch (e$) {}
  };
  onError = function(err, code, cmd){
    cleanDir();
    return emitter.emit('error', err, code, cmd);
  };
  onEntry = function(entry){
    if (entry) {
      return emitter.emit('entry', entry);
    }
  };
  onArchive = function(archive){
    if (archive) {
      return emitter.emit('archive', archive);
    }
  };
  onProgress = function(status){
    return emitter.emit('progress', status);
  };
  onEnd = function(output){
    cleanDir();
    return emitter.emit('end', output, options);
  };
  extractor = function(){
    return extract(options).on('error', onError).on('entry', onEntry).on('end', onEnd);
  };
  downloader = function(){
    return download(options).on('download', function(){
      return emitter.emit(
      'download');
    }).on('progress', onProgress).on('error', onError).on('end', extractor);
  };
  doInstall = function(){
    if (!isFile(
    path)) {
      return onError(
      new Error('Path is invalid'));
    }
    if (isUrl(
    path)) {
      return downloader();
    } else {
      return extractor();
    }
  };
  doInstall();
  return emitter;
};
apply = function(options){
  return extend(partialize$.apply(this, [
    clone(
    defaults), [void 8], [0]
  ]))(
  options);
};
function partialize$(f, args, where){
  var context = this;
  return function(){
    var params = slice$.call(arguments), i,
        len = params.length, wlen = where.length,
        ta = args ? args.concat() : [], tw = where ? where.concat() : [];
    for(i = 0; i < len; ++i) { ta[tw[0]] = params[i]; tw.shift(); }
    return len < wlen && len ?
      partialize$.apply(context, [f, ta, tw]) : f.apply(context, ta);
  };
}
