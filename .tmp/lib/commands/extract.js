// Generated by LiveScript 1.2.0
var path, nar, program, ref$, echo, exit, exists, isFile, addExtension, toKb, extract;
path = require('path');
nar = require('../nar');
program = require('commander');
ref$ = require('../utils'), echo = ref$.echo, exit = ref$.exit, exists = ref$.exists, isFile = ref$.isFile, addExtension = ref$.addExtension, toKb = ref$.toKb;
program.command('extract <archive>').description('\n  Extract archive').usage('[archive] [options]').option('-o, --output <path>', 'Output directory. Default to current directory').option('-d, --debug', 'Enable debug mode. More information will be shown').option('-v, --verbose', 'Enable verbose mode. A lot of information will be shown').on('--help', function(){
  return echo('  Usage examples:\n\n    $ nar extract\n    $ nar extract app.nar\n    $ nar extract app.nar -o some/dir\n    $ nar extract app.nar --debug\n\t');
}).action(function(){
  return extract.apply(this, arguments);
});
extract = function(archive, options){
  var debug, verbose, output, opts, onStart, onError, onEntry, onArchive, onEnd, extract, e;
  debug = options.debug, verbose = options.verbose, output = options.output;
  opts = {
    path: addExtension(
    archive),
    dest: output
  };
  onStart = function(){
    return echo(
    "Reading archive...");
  };
  onError = function(err, code){
    if (err) {
      echo(
      ("Error: " + (err.message || err)).red);
    }
    if (debug && err.stack) {
      echo(
      err.stack);
    }
    return exit(
    code || 1)();
  };
  onEntry = function(it){
    return echo(
    "Extract [".green + (toKb(
    it.size) + " KB").cyan + ("] " + (it.path || '')).green);
  };
  onArchive = function(it){
    if (!(debug && verbose)) {
      return echo(
      "Extracting [" + it.type.cyan + "] " + (it.name || ''));
    }
  };
  onEnd = function(it){
    echo(
    "Extracted in: " + it.dest);
    return exit(0);
  };
  extract = function(){
    var archive;
    if (!isFile(
    opts.path)) {
      exit(1)(
      "The given path is not a file");
    }
    archive = nar.extract(opts).on('start', onStart).on('archive', onArchive).on('error', onError).on('end', onEnd);
    if (debug || verbose) {
      return archive.on('entry', onEntry);
    }
  };
  try {
    return extract();
  } catch (e$) {
    e = e$;
    return onError(
    "Cannot extract the archive: " + e.message);
  }
};
