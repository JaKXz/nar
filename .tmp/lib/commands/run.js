// Generated by LiveScript 1.2.0
var path, nar, program, ref$, echo, exit, archiveName, run, formatEol;
path = require('path');
nar = require('../nar');
program = require('commander');
ref$ = require('../utils'), echo = ref$.echo, exit = ref$.exit, archiveName = ref$.archiveName;
program.command('run <archive>').description('\n  Run archive files').usage('[archive] [options]').option('-o, --output <path>', 'Output directory').option('-d, --debug', 'Enable debud mode. More information will be shown').option('-v, --verbose', 'Enable verbose  mode. Will output stdout and stderr').option('-as, --args-start <args>', 'Aditional arguments to pass to start command').option('-ap, --args-prestart <args>', 'Aditional arguments to pass to prestart command').option('-as, --args-stop <args>', 'Aditional arguments to pass to stop command').option('-ax, --args-poststop <args>', 'Aditional arguments to pass to poststop command').option('--user <user>', 'HTTP autenticantion user').option('--password <password>', 'HTTP user password').option('--proxy <url>', 'URL proxy to use').option('--no-clean', 'Disable app directory clean after exit').option('--no-hooks', 'Disable command hooks').on('--help', function(){
  return echo('  Usage examples:\n\n    $ nar run app.nar\n    $ nar run app.nar -o some/dir\n    $ nar run app.nar --args-start \'--node ${PATH}\'\n    $ nar run app.nar --debug --no-hooks\n    $ nar run http://my.server.net/my-app-0.1.0.nar\n\t');
}).action(function(){
  return run.apply(this, arguments);
});
run = function(archive, options){
  var debug, verbose, output, clean, hooks, proxy, argsStart, argsPrestart, argsStop, argsPoststop, opts, onExtract, onStart, onEnd, onArchive, onError, onCommand, onEntry, onInfo, onStdout, onStderr, onExit, run, e;
  debug = options.debug, verbose = options.verbose, output = options.output, clean = options.clean, hooks = options.hooks, proxy = options.proxy, argsStart = options.argsStart, argsPrestart = options.argsPrestart, argsStop = options.argsStop, argsPoststop = options.argsPoststop;
  opts = {
    path: archive,
    dest: output,
    clean: clean,
    hooks: hooks,
    proxy: proxy,
    args: {
      start: argsStart,
      prestart: argsPrestart,
      stop: argsStop,
      poststop: argsPoststop
    }
  };
  if (options.user) {
    if (!options.pass) {
      return;
    } else {
      opts.auth = {
        user: options.user,
        pass: options.pass
      };
    }
  }
  onExtract = function(){
    return echo(
    "Extracting files...");
  };
  onStart = function(){
    return echo(
    "Starting app...");
  };
  onEnd = function(){
    return echo(
    "Finished");
  };
  onArchive = function(it){
    if (!(debug && verbose)) {
      return echo(
      "Extracting [" + it.type.cyan + "] " + it.name);
    }
  };
  onError = function(err, code){
    if (err) {
      echo(
      ("Error: " + (err.message || err)).red);
    }
    if (debug && err.stack) {
      echo(
      err.stack);
    }
    return exit(
    code || 1)();
  };
  onCommand = function(cmd, hook){
    return echo(
    "Run [".green + hook.cyan + ("]: " + cmd).green);
  };
  onEntry = function(it){
    return echo(
    "Extract [".green + (it.size + " KB").cyan + ("] " + it.path).green);
  };
  onInfo = function(it){
    return echo(
    "Running " + archiveName(
    it));
  };
  onStdout = function(out){
    return echo(
    ("> " + formatEol(
    out)).green);
  };
  onStderr = function(out){
    return echo(
    ("> " + formatEol(
    out)).red);
  };
  onExit = function(code, hook){
    return echo(
    "End [".green + hook.cyan + ("]: exited with code " + code).green);
  };
  run = function(){
    var archive;
    archive = nar.run(opts).on('extract', onExtract).on('info', onInfo).on('archive', onArchive).on('start', onStart).on('error', onError).on('end', onEnd);
    if (debug || verbose) {
      archive.on('command', onCommand);
      archive.on('exit', onExit);
      archive.on('stdout', onStdout);
      archive.on('stderr', onStderr);
    }
    if (verbose) {
      return archive.on('entry', onEntry);
    }
  };
  try {
    return run();
  } catch (e$) {
    e = e$;
    return onError(
    e);
  }
};
formatEol = function(it){
  if (it) {
    return it.replace(/\n(\s+)?$/, '').replace(/\n/g, '\n> ');
  }
};
